{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/router.ts","../src/fetcher.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\nexport const WADZCHAIN_CHAIN_ID: ChainId = 171717 as const\n/** NOTE: Wadz-specific */\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÃ–RLI = 5,\n  KOVAN = 42,\n  WADZCHAIN_MAINNET = WADZCHAIN_CHAIN_ID,\n  BNB = 56\n}\n/** NOTE: Wadz-specific */\nexport const WADZCHAIN_RPC_URL = 'https://rpc.wadzchain.io'\nexport const WADZCHAIN_WWCO_ADDRESS = '0x2996F51be16a9ee9A0a867f7518D55908F6B44CA'\nexport const BNB_WBNB_ADDRESS = '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c'\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\n/** NOTE: Wadz-specific */\nconst INIT_CODE_HASH = '0xef8ef663d992dea71acf872a41c6c344699e481f62330c39dae2be4102890f7a'\nconst INIT_CODE_HASH_MAP = {\n  [ChainId.BNB]: '0xef8ef663d992dea71acf872a41c6c344699e481f62330c39dae2be4102890f7a',\n  [ChainId.MAINNET]: '0xef8ef663d992dea71acf872a41c6c344699e481f62330c39dae2be4102890f7a',\n  [ChainId.WADZCHAIN_MAINNET]: '0xef8ef663d992dea71acf872a41c6c344699e481f62330c39dae2be4102890f7a'\n}\n\nexport const getInitCodeHash = (chainId: ChainId) => {\n  return INIT_CODE_HASH_MAP[chainId] || INIT_CODE_HASH\n}\n\nconst FACTORY_ADDRESS = '0x9A9bed06107B0036361DE7320042918c029EDB78'\nconst FACTORY_ADDRESS_MAP = {\n  [ChainId.BNB]: '0x2996F51be16a9ee9A0a867f7518D55908F6B44CA',\n  [ChainId.MAINNET]: '0x65166A8f9C8bC43fA0647F088FCDb9B044C9F48D',\n  [ChainId.WADZCHAIN_MAINNET]: '0x9A9bed06107B0036361DE7320042918c029EDB78'\n}\n\nexport const getFactoryAddress = (chainId: ChainId) => {\n  return FACTORY_ADDRESS_MAP[chainId] || FACTORY_ADDRESS\n}\n\nconst ROUTER_ADDRESS = '0xdbA784B3A27a5dBFCa0739eD3E8EFdea2bF8F663'\nconst ROUTER_ADDRESS_MAP = {\n  [ChainId.BNB]: '0x65166A8f9C8bC43fA0647F088FCDb9B044C9F48D',\n  [ChainId.MAINNET]: '0xaD2DD426639fE954f6c47f55758CCF9AFC535BE0',\n  [ChainId.WADZCHAIN_MAINNET]: '0xdbA784B3A27a5dBFCa0739eD3E8EFdea2bF8F663'\n}\n\nexport const getRouterAddress = (chainId: ChainId) => {\n  return ROUTER_ADDRESS_MAP[chainId] || ROUTER_ADDRESS\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport { ChainId } from '../constants'\nimport { SolidityType } from '../constants'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  /**\n   * The only instance of the base class `Currency`.\n   */\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ethereum')\n  public static readonly WCO: Currency = new Currency(18, 'WCO', 'WCO')\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'BNB')\n\n  getSymbol(chainId: ChainId) {\n    if (chainId === ChainId.WADZCHAIN_MAINNET) {\n      return Currency.WCO.symbol\n    }\n    if (chainId === ChainId.BNB) {\n      return Currency.BNB.symbol\n    }\n\n    return Currency.ETHER.symbol\n  }\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n}\n\nconst ETHER = Currency.ETHER\nexport { ETHER }\n","import invariant from 'tiny-invariant'\nimport { BNB_WBNB_ADDRESS, ChainId, WADZCHAIN_WWCO_ADDRESS } from '../constants'\nimport { validateAndParseAddress } from '../utils'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÃ–RLI]: new Token(ChainId.GÃ–RLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  /** NOTE: Wadz-specific */\n  [ChainId.WADZCHAIN_MAINNET]: new Token(ChainId.WADZCHAIN_MAINNET, WADZCHAIN_WWCO_ADDRESS, 18, 'WWCO', 'Wrapped WCO'),\n  /** NOTE: BNB-specific */\n  [ChainId.BNB]: new Token(ChainId.BNB, BNB_WBNB_ADDRESS, 18, 'WBNB', 'Wrapped BNB')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000,\n  ChainId,\n  getInitCodeHash,\n  getFactoryAddress\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\n/** Note: WADZ Specific multichain is here */\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    const INIT_CODE_HASH = getInitCodeHash(tokenA.chainId)\n    const FACTORY_ADDRESS = getFactoryAddress(tokenA.chainId)\n\n    if (PAIR_ADDRESS_CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [tokens[0].address]: {\n          ...PAIR_ADDRESS_CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'WLP-V2',\n      'WLP V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        // @ts-ignore\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n\n        // @ts-ignore\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline = `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","SolidityType","INIT_CODE_HASH_MAP","_INIT_CODE_HASH_MAP","BNB","MAINNET","WADZCHAIN_MAINNET","getInitCodeHash","chainId","FACTORY_ADDRESS_MAP","_FACTORY_ADDRESS_MAP","getFactoryAddress","ROUTER_ADDRESS_MAP","_ROUTER_ADDRESS_MAP","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SOLIDITY_TYPE_MAXIMA","_SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_Error","_this","call","name","constructor","setPrototypeOf","prototype","_inheritsLoose","_wrapNativeSuper","Error","InsufficientInputAmountError","_Error2","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","getSymbol","WCO","ETHER","Token","_Currency","_proto","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","_WETH","ROPSTEN","RINKEBY","GÃ–RLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","_toSignificantRoundin","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","_toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","_Fraction","currency","amount","parsedAmount","exponentiate","ether","raw","toExact","TokenAmount","_CurrencyAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","_step","prices","_iterator","_createForOfIteratorHelperLoose","pairs","entries","done","_step$value","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","_PAIR_ADDRESS_CACHE2","_extends2","_extends3","tokens","INIT_CODE_HASH","FACTORY_ADDRESS","undefined","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$t","_extends","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","apply","arguments","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","_pair$getOutputAmount","nextPair","_pair$getInputAmount","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","_temp","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","_ref","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","concat","pairsExcludingThisPair","bestTradeExactOut","currencyIn","currencyAmountOut","_temp2","originalAmountOut","_ref2$maxNumResults","_ref2","_ref2$maxHops","tokenIn","isInsufficientReservesError","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","TOKEN_DECIMALS_CACHE","_TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Promise","resolve","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","e","reject","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances"],"mappings":"sJAMYA,EAcAC,EAKAC,0ZAnBAF,EAAAA,kBAAAA,4CAEVA,yBACAA,yBACAA,wBACAA,sBACAA,sBARyC,4BASzCA,mBAOUC,EAAAA,oBAAAA,sDAEVA,oCAGUC,EAAAA,mBAAAA,mDAEVA,qCACAA,2BAIF,IA8CYC,EA7CNC,IAAkBC,MACrBL,gBAAQM,KAAM,qEAAoED,EAClFL,gBAAQO,SAAU,qEAAoEF,EACtFL,gBAAQQ,mBAAoB,qEAAoEH,GAGtFI,EAAkB,SAACC,GAC9B,OAAON,EAAmBM,IARL,sEAYjBC,IAAmBC,MACtBZ,gBAAQM,KAAM,6CAA4CM,EAC1DZ,gBAAQO,SAAU,6CAA4CK,EAC9DZ,gBAAQQ,mBAAoB,6CAA4CI,GAG9DC,EAAoB,SAACH,GAChC,OAAOC,EAAoBD,IARL,8CAYlBI,IAAkBC,MACrBf,gBAAQM,KAAM,6CAA4CS,EAC1Df,gBAAQO,SAAU,6CAA4CQ,EAC9Df,gBAAQQ,mBAAoB,6CAA4CO,GAO9DC,EAAoBC,EAAKC,OAAO,KAGhCC,EAAOF,EAAKC,OAAO,GACnBE,EAAMH,EAAKC,OAAO,GAClBG,EAAMJ,EAAKC,OAAO,GAClBI,EAAQL,EAAKC,OAAO,GACpBK,EAAON,EAAKC,OAAO,GACnBM,EAAMP,EAAKC,OAAO,IAClBO,EAAOR,EAAKC,OAAO,KACnBQ,EAAOT,EAAKC,OAAO,KACnBS,EAAQV,EAAKC,OAAO,MAEjC,SAAYf,GACVA,gBACAA,oBAFF,CAAYA,IAAAA,OAKL,IAAMyB,IAAoBC,MAC9B1B,EAAa2B,OAAQb,EAAKC,OAAO,QAAOW,EACxC1B,EAAa4B,SAAUd,EAAKC,OAAO,sEAAqEW,suFCpF3G,IAAMG,EAAoB,mBAAoBC,OAMjCC,WAA0BC,GAGrC,SAAAD,UAG0E,OAFxEE,EAAAD,EAAAE,+CAHkD,EAIlDD,EAAKE,KAAOF,EAAKG,YAAYD,KACzBN,GAAmBC,OAAOO,eAAcJ,mBAAOF,OAAAK,oBAAWE,WAAUL,EACzE,OAAAM,EAAAR,EAAAC,GAAAD,GAAAS,EAP4CC,QAclCC,WAA6BC,GAGxC,SAAAD,UAG0E,OAFxEE,EAAAD,EAAAT,kDAHqD,EAIrDU,EAAKT,KAAOS,EAAKR,YAAYD,KACzBN,GAAmBC,OAAOO,eAAcO,mBAAOF,OAAAN,oBAAWE,WAAUM,EACzE,OAAAL,EAAAG,EAAAC,GAAAD,GAAAF,EAP+CC,iBCdlCI,EAA6BC,EAAaC,GAC9CjC,EAAKkC,mBAAmBF,EAAO9B,IAAzCiC,MACUnC,EAAKoC,gBAAgBJ,EAAOrB,EAAqBsB,KAA3DE,eAIcE,EAAwBC,GACtC,IAGE,OAF2BC,aAAWD,GAGtC,MAAOE,GACPL,gBAIYM,EAAeC,GAC7B,OAAOA,aAAqB1C,EACxB0C,EAEA1C,EAAKC,OADgB,iBAAdyC,EACKA,EAAUC,WACVD,YAIFE,GAAKC,GACnBd,EAA6Bc,EAAG3D,EAAa4B,SAC7C,IACIgC,EADAC,EAAU7C,EAEd,GAAIF,EAAKgD,YAAYH,EAAGxC,GAGtB,IAFA0C,EAAIF,EACJC,EAAI9C,EAAKiD,IAAIjD,EAAKkD,OAAOL,EAAGzC,GAAMD,GAC3BH,EAAKmD,SAASL,EAAGC,IACtBA,EAAID,EACJA,EAAI9C,EAAKkD,OAAOlD,EAAKiD,IAAIjD,EAAKkD,OAAOL,EAAGC,GAAIA,GAAI1C,QAEzCJ,EAAKoD,SAASP,EAAG3C,KAC1B6C,EAAI5C,GAEN,OAAO4C,EAKT,SAAgBM,GAAgBC,EAAYL,EAAQM,EAAiBC,GAMnE,GALUD,EAAU,GAApBpB,MAEUmB,EAAMG,QAAUF,GAA1BpB,MAGqB,IAAjBmB,EAAMG,OAER,OADAH,EAAMI,KAAKT,GACJ,KAEP,IAAMU,EAASL,EAAMG,SAAWF,EAEhC,GAAII,GAAUH,EAAWF,EAAMA,EAAMG,OAAS,GAAIR,IAAQ,EACxD,OAAOA,EAMT,IAHA,IAAIW,EAAK,EACPC,EAAKP,EAAMG,OAENG,EAAKC,GAAI,CACd,IAAMC,EAAOF,EAAKC,IAAQ,EACtBL,EAAWF,EAAMQ,GAAMb,IAAQ,EACjCW,EAAKE,EAAM,EAEXD,EAAKC,EAIT,OADAR,EAAMS,OAAOH,EAAI,EAAGX,GACbU,EAASL,EAAMU,MAAS,KCrEnC,IAAaC,cA4BX,SAAAA,EAAsBC,EAAkBC,EAAiB9C,GACvDU,EAA6B/B,EAAKC,OAAOiE,GAAWhF,EAAa2B,OAEjEuD,KAAKF,SAAWA,EAChBE,KAAKD,OAASA,EACdC,KAAK/C,KAAOA,EAZb,OAaA4C,EAAAzC,UAtBD6C,UAAA,SAAU5E,GACR,OAAIA,IAAYV,gBAAQQ,kBACf0E,EAASK,IAAIH,OAElB1E,IAAYV,gBAAQM,IACf4E,EAAS5E,IAAI8E,OAGfF,EAASM,MAAMJ,QACvBF,KAbsBA,SAAkB,IAAIA,GAAS,GAAI,MAAO,YAC1CA,OAAgB,IAAIA,GAAS,GAAI,MAAO,OACxCA,OAAgB,IAAIA,GAAS,GAAI,MAAO,cA2B3DM,GAAQN,GAASM,MCvCVC,YAAMC,GAIjB,SAAAD,EAAmB/E,EAAkB6C,EAAiB4B,EAAkBC,EAAiB9C,SAGxC,OAF/CF,EAAAsD,EAAArD,UAAM8C,EAAUC,EAAQ9C,UACnB5B,QAAUA,EACf0B,EAAKmB,QAAUD,EAAwBC,GAAQnB,EAGjDM,EAAA+C,EAAAC,GAAA,IAAAC,EAAAF,EAAAhD,UAsBC,OAtBDkD,EAIOC,OAAA,SAAOC,GAEZ,OAAIR,OAASQ,GAGNR,KAAK3E,UAAYmF,EAAMnF,SAAW2E,KAAK9B,UAAYsC,EAAMtC,SAGlEoC,EAMOG,YAAA,SAAYD,GAGjB,OAFUR,KAAK3E,UAAYmF,EAAMnF,SAAjC0C,MACUiC,KAAK9B,UAAYsC,EAAMtC,SAAjCH,MACOiC,KAAK9B,QAAQwC,cAAgBF,EAAMtC,QAAQwC,eACnDN,GAhCwBP,aAsCXc,GAAeC,EAAqBC,GAClD,OAAID,aAAqBR,IAASS,aAAqBT,GAC9CQ,EAAUL,OAAOM,KACfD,aAAqBR,IAErBS,aAAqBT,IAGvBQ,IAAcC,aAIZC,KAAIC,OACdpG,gBAAQO,SAAU,IAAIkF,GACrBzF,gBAAQO,QACR,6CACA,GACA,OACA,iBACD6F,GACApG,gBAAQqG,SAAU,IAAIZ,GACrBzF,gBAAQqG,QACR,6CACA,GACA,OACA,iBACDD,GACApG,gBAAQsG,SAAU,IAAIb,GACrBzF,gBAAQsG,QACR,6CACA,GACA,OACA,iBACDF,GACApG,gBAAQuG,OAAQ,IAAId,GAAMzF,gBAAQuG,MAAO,6CAA8C,GAAI,OAAQ,iBAAgBH,GACnHpG,gBAAQwG,OAAQ,IAAIf,GAAMzF,gBAAQwG,MAAO,6CAA8C,GAAI,OAAQ,iBAAgBJ,GAEnHpG,gBAAQQ,mBAAoB,IAAIiF,GAAMzF,gBAAQQ,kBJlEX,6CIkEsD,GAAI,OAAQ,eAAc4F,GAEnHpG,gBAAQM,KAAM,IAAImF,GAAMzF,gBAAQM,IJnEH,6CImE0B,GAAI,OAAQ,eAAc8F,IC3E9EK,GAAUC,EAASC,GACnBC,GAAMF,EAASG,GAEfC,KAAqBC,OACxB7G,iBAAS8G,YAAaP,GAAQO,WAAUD,GACxC7G,iBAAS+G,eAAgBR,GAAQQ,cAAaF,GAC9C7G,iBAASgH,UAAWT,GAAQS,SAAQH,IAGjCI,KAAeC,OAClBlH,iBAAS8G,iBACT9G,iBAAS+G,oBACT/G,iBAASgH,gBAGCG,cAIX,SAAAA,EAAmBC,EAAsBC,YAAAA,IAAAA,EAAyBnG,GAChEiE,KAAKiC,UAAY5D,EAAe4D,GAChCjC,KAAKkC,YAAc7D,EAAe6D,GAGpC,IAAA5B,EAAA0B,EAAA5E,UA4GC,OA5GDkD,EAUO6B,OAAA,WACL,OAAO,IAAIH,EAAShC,KAAKkC,YAAalC,KAAKiC,YAC5C3B,EAEMzB,IAAA,SAAI2B,GACT,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAI5E,EAAKyG,MAAMrC,KAAKkC,YAAaE,EAAYF,aACpC,IAAIF,EAASpG,EAAKiD,IAAImB,KAAKiC,UAAWG,EAAYH,WAAYjC,KAAKkC,aAErE,IAAIF,EACTpG,EAAKiD,IACHjD,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAASF,EAAYH,UAAWjC,KAAKkC,cAE5CtG,EAAK0G,SAAStC,KAAKkC,YAAaE,EAAYF,eAE/C5B,EAEMiC,SAAA,SAAS/B,GACd,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAI5E,EAAKyG,MAAMrC,KAAKkC,YAAaE,EAAYF,aACpC,IAAIF,EAASpG,EAAK2G,SAASvC,KAAKiC,UAAWG,EAAYH,WAAYjC,KAAKkC,aAE1E,IAAIF,EACTpG,EAAK2G,SACH3G,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAASF,EAAYH,UAAWjC,KAAKkC,cAE5CtG,EAAK0G,SAAStC,KAAKkC,YAAaE,EAAYF,eAE/C5B,EAEMvB,SAAA,SAASyB,GACd,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAO5E,EAAKmD,SACVnD,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAASF,EAAYH,UAAWjC,KAAKkC,eAE7C5B,EAEMkC,QAAA,SAAQhC,GACb,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAO5E,EAAKyG,MACVzG,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAASF,EAAYH,UAAWjC,KAAKkC,eAE7C5B,EAEM1B,YAAA,SAAY4B,GACjB,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAO5E,EAAKgD,YACVhD,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAASF,EAAYH,UAAWjC,KAAKkC,eAE7C5B,EAEMgC,SAAA,SAAS9B,GACd,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAO,IAAIwB,EACTpG,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYH,WAC1CrG,EAAK0G,SAAStC,KAAKkC,YAAaE,EAAYF,eAE/C5B,EAEMxB,OAAA,SAAO0B,GACZ,IAAM4B,EAAc5B,aAAiBwB,EAAWxB,EAAQ,IAAIwB,EAAS3D,EAAemC,IACpF,OAAO,IAAIwB,EACTpG,EAAK0G,SAAStC,KAAKiC,UAAWG,EAAYF,aAC1CtG,EAAK0G,SAAStC,KAAKkC,YAAaE,EAAYH,aAE/C3B,EAEMmC,cAAA,SACLC,EACAC,EACAC,YADAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqB/H,iBAAS+G,eAEpBkB,OAAOC,UAAUL,IAA3B3E,MACU2E,EAAoB,GAA9B3E,MAEAqD,GAAQ4B,IAAI,CAAEC,UAAWP,EAAoB,EAAGE,SAAUnB,GAAsBmB,KAChF,IAAMM,EAAW,IAAI9B,GAAQpB,KAAKiC,UAAU1D,YACzC4E,IAAInD,KAAKkC,YAAY3D,YACrB6E,oBAAoBV,GACvB,OAAOQ,EAAS7B,SAAS6B,EAASG,gBAAiBV,IACpDrC,EAEMgD,QAAA,SACLD,EACAV,EACAC,GAOA,gBARAD,IAAAA,EAAiB,CAAEE,eAAgB,cACnCD,IAAAA,EAAqB/H,iBAAS+G,eAEpBkB,OAAOC,UAAUM,IAA3BtF,MACUsF,GAAiB,GAA3BtF,MAEAwD,GAAIgC,GAAKF,EACT9B,GAAIiC,GAAK1B,GAAgBc,GAClB,IAAIrB,GAAIvB,KAAKiC,UAAU1D,YAAY4E,IAAInD,KAAKkC,YAAY3D,YAAY8C,SAASgC,EAAeV,IACpGc,EAAAzB,IAAA0B,eAAAC,IA3GD,WACE,OAAO/H,EAAKkD,OAAOkB,KAAKiC,UAAWjC,KAAKkC,gBAG1CwB,gBAAAC,IACA,WACE,OAAO,IAAI3B,EAASpG,EAAKgI,UAAU5D,KAAKiC,UAAWjC,KAAKkC,aAAclC,KAAKkC,oBC9BzEX,GAAMF,EAASG,GAERqC,YAAeC,GAY1B,SAAAD,EAAsBE,EAAoBC,SAClCC,EAAe5F,EAAe2F,GAIZ,OAHxBrG,EAA6BsG,EAAcnJ,EAAa4B,UAExDK,EAAA+G,EAAA9G,UAAMiH,EAAcrI,EAAKsI,aAAa/H,EAAKP,EAAKC,OAAOkI,EAASjE,mBAC3DiE,SAAWA,EAAQhH,EAd1BM,EAAAwG,EAAAC,GAAAD,EAIcM,MAAP,SAAaH,GAClB,OAAO,IAAIH,EAAe1D,GAAO6D,IAClC,IAAA1D,EAAAuD,EAAAzG,UA6CA,OA7CAkD,EAeMzB,IAAA,SAAI2B,GAET,OADUG,GAAeX,KAAK+D,SAAUvD,EAAMuD,WAA9ChG,MACO,IAAI8F,EAAe7D,KAAK+D,SAAUnI,EAAKiD,IAAImB,KAAKoE,IAAK5D,EAAM4D,OACnE9D,EAEMiC,SAAA,SAAS/B,GAEd,OADUG,GAAeX,KAAK+D,SAAUvD,EAAMuD,WAA9ChG,MACO,IAAI8F,EAAe7D,KAAK+D,SAAUnI,EAAK2G,SAASvC,KAAKoE,IAAK5D,EAAM4D,OACxE9D,EAEMmC,cAAA,SACLC,EACAC,EACAC,GAEA,gBAJAF,IAAAA,EAA4B,YAE5BE,IAAAA,EAAqB/H,iBAAS8G,YAE9BmC,EAAA1G,UAAaqF,cAAazF,UAAC0F,EAAmBC,EAAQC,IACvDtC,EAEMgD,QAAA,SACLD,EACAV,EACAC,GAGA,gBALAS,IAAAA,EAAwBrD,KAAK+D,SAASjE,mBAEtC8C,IAAAA,EAAqB/H,iBAAS8G,YAEpB0B,GAAiBrD,KAAK+D,SAASjE,UAAzC/B,MACA+F,EAAA1G,UAAakG,QAAOtG,UAACqG,EAAeV,EAAQC,IAC7CtC,EAEM+D,QAAA,SAAQ1B,GAEb,gBAFaA,IAAAA,EAAiB,CAAEE,eAAgB,KAChDtB,GAAIgC,GAAKvD,KAAK+D,SAASjE,SAChB,IAAIyB,GAAIvB,KAAKiC,UAAU1D,YAAY4E,IAAInD,KAAKkC,YAAY3D,YAAY8C,SAASsB,IACrFc,EAAAI,IAAAH,UAAAC,IAlCD,WACE,OAAO3D,KAAKiC,eArBoBD,ICNvBsC,YAAYC,GAIvB,SAAAD,EAAmBE,EAAcR,SAEb,OADlBjH,EAAAwH,EAAAvH,UAAMwH,EAAOR,UACRQ,MAAQA,EAAKzH,EACnBM,EAAAiH,EAAAC,GAAA,IAAAjE,EAAAgE,EAAAlH,UAUA,OAVAkD,EAEMzB,IAAA,SAAI2B,GAET,OADUR,KAAKwE,MAAMjE,OAAOC,EAAMgE,QAAlCzG,MACO,IAAIuG,EAAYtE,KAAKwE,MAAO5I,EAAKiD,IAAImB,KAAKoE,IAAK5D,EAAM4D,OAC7D9D,EAEMiC,SAAA,SAAS/B,GAEd,OADUR,KAAKwE,MAAMjE,OAAOC,EAAMgE,QAAlCzG,MACO,IAAIuG,EAAYtE,KAAKwE,MAAO5I,EAAK2G,SAASvC,KAAKoE,IAAK5D,EAAM4D,OAClEE,GAjB8BT,ICKpBY,YAAMX,GAkBjB,SAAAW,EAAmBC,EAAwBC,EAAyBzC,EAAwBD,SAQzF,OAPDlF,EAAA+G,EAAA9G,UAAMiF,EAAWC,UAEZwC,aAAeA,EACpB3H,EAAK4H,cAAgBA,EACrB5H,EAAK6H,OAAS,IAAI5C,GAChBpG,EAAKsI,aAAa/H,EAAKP,EAAKC,OAAO6I,EAAa5E,WAChDlE,EAAKsI,aAAa/H,EAAKP,EAAKC,OAAO8I,EAAc7E,YAClD/C,EACFM,EAAAoH,EAAAX,GAAAW,EAtBaI,UAAP,SAAiBC,GAEtB,IADA,IAC6CC,EADvCC,EAAkB,GACxBC,EAAAC,EAAwBJ,EAAMK,MAAMC,aAASL,EAAAE,KAAAI,MAAE,CAAA,IAAAC,EAAAP,EAAAnH,MAAhC2H,EAAID,KACjBN,EAAO1F,KACLwF,EAAMU,KAFGF,MAEK/E,OAAOgF,EAAKE,QACtB,IAAIhB,EAAMc,EAAKG,SAAS3B,SAAUwB,EAAKI,SAAS5B,SAAUwB,EAAKG,SAAStB,IAAKmB,EAAKI,SAASvB,KAC3F,IAAIK,EAAMc,EAAKI,SAAS5B,SAAUwB,EAAKG,SAAS3B,SAAUwB,EAAKI,SAASvB,IAAKmB,EAAKG,SAAStB,MAGnG,OAAOY,EAAOY,MAAM,GAAGC,QAAO,SAACC,EAAaC,GAAY,OAAKD,EAAYxD,SAASyD,KAAef,EAAO,KACzG,IAAA1E,EAAAmE,EAAArH,UA+CA,OA/CAkD,EAsBM6B,OAAA,WACL,OAAO,IAAIsC,EAAMzE,KAAK2E,cAAe3E,KAAK0E,aAAc1E,KAAKiC,UAAWjC,KAAKkC,cAC9E5B,EAEMgC,SAAA,SAAS9B,GACJG,GAAeX,KAAK2E,cAAenE,EAAMkE,eAAnD3G,MACA,IAAMiI,EAAQlC,EAAA1G,UAASkF,SAAQtF,UAACwD,GAChC,OAAO,IAAIiE,EAAMzE,KAAK0E,aAAclE,EAAMmE,cAAeqB,EAAS9D,YAAa8D,EAAS/D,YAG1F3B,EACO2F,MAAA,SAAMC,GAEX,OADUvF,GAAeuF,EAAenC,SAAU/D,KAAK0E,eAAvD3G,MACIiC,KAAK2E,yBAAyBvE,GACzB,IAAIkE,GAAYtE,KAAK2E,cAAeb,EAAA1G,UAAMkF,SAAQtF,UAACkJ,EAAe9B,KAAKlB,UAEzEW,GAAeM,MAAML,EAAA1G,UAAMkF,SAAQtF,UAACkJ,EAAe9B,KAAKlB,WAChE5C,EAEMmC,cAAA,SAAcC,EAA+BC,EAAiBC,GACnE,gBADmBF,IAAAA,EAA4B,GACxC1C,KAAKmG,SAAS1D,cAAcC,EAAmBC,EAAQC,IAC/DtC,EAEMgD,QAAA,SAAQD,EAA2BV,EAAiBC,GACzD,gBADaS,IAAAA,EAAwB,GAC9BrD,KAAKmG,SAAS7C,QAAQD,EAAeV,EAAQC,IACrDa,EAAAgB,IAAAf,UAAAC,IAjCD,WACE,OAAO,IAAI3B,GAAShC,KAAKiC,UAAWjC,KAAKkC,gBAC1CwB,eAAAC,IAED,WACE,OAAAG,EAAA1G,UAAakF,SAAQtF,UAACgD,KAAK4E,aAlCJ5C,ICWvBoE,GAAuF,GAG9EC,cA2BX,SAAAA,EAAmBC,EAA2BC,GAC5C,IAAMC,EAAeF,EAAa9B,MAAM/D,YAAY8F,EAAa/B,OAC7D,CAAC8B,EAAcC,GACf,CAACA,EAAcD,GACnBtG,KAAKyG,eAAiB,IAAIrG,GACxBoG,EAAa,GAAGhC,MAAMnJ,QACtBgL,EAAKlI,WAAWqI,EAAa,GAAGhC,MAAOgC,EAAa,GAAGhC,OACvD,GACA,SACA,UAEFxE,KAAKwG,aAAeA,EACrBH,EAnCalI,WAAP,SAAkBuI,EAAeC,WAM0CC,EAAAC,EAAAC,EAL1EC,EAASL,EAAOjG,YAAYkG,GAAU,CAACD,EAAQC,GAAU,CAACA,EAAQD,GAElEM,EAAiB5L,EAAgBsL,EAAOrL,SACxC4L,EAAkBzL,EAAkBkL,EAAOrL,SAgBjD,YAdqE6L,aAAjEC,EAAAf,cAAkBe,WAAAC,EAAlBD,EAAqBJ,EAAO,GAAG7I,oBAAQkJ,SAAvCA,EAA0CL,EAAO,GAAG7I,YACtDkI,GAAkBiB,KACbjB,KAAkBU,MACpBC,EAAO,GAAG7I,SAAOmJ,aAAAT,EACbR,cAAkBQ,SAAlBA,EAAqBG,EAAO,GAAG7I,WAAQ2I,MACzCE,EAAO,GAAG7I,SAAUoJ,oBACnBL,EACAM,YAAU,CAAC,SAAU,CAACC,OAAK,CAAC,UAAW,WAAY,CAACT,EAAO,GAAG7I,QAAS6I,EAAO,GAAG7I,YACjF8I,GACDH,IAAAC,KAKAV,GAAmBW,EAAO,GAAG7I,SAAS6I,EAAO,GAAG7I,UAiBzD,IAAAoC,EAAA+F,EAAAjJ,UAmKC,OAnKDkD,EAIOmH,cAAA,SAAcjD,GACnB,OAAOA,EAAMjE,OAAOP,KAAKyF,SAAWjB,EAAMjE,OAAOP,KAAK0H,SAiBxDpH,EAIOqH,QAAA,SAAQnD,GAEb,OADUxE,KAAKyH,cAAcjD,IAA7BzG,MACOyG,EAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK4H,YAAc5H,KAAK6H,aAG7DvH,EAuBOwH,UAAA,SAAUtD,GAEf,OADUxE,KAAKyH,cAAcjD,IAA7BzG,MACOyG,EAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK0F,SAAW1F,KAAK2F,UACzDrF,EAEMyH,gBAAA,SAAgBC,GAErB,GADUhI,KAAKyH,cAAcO,EAAYxD,QAAzCzG,MACInC,EAAKyG,MAAMrC,KAAK0F,SAAStB,IAAKtI,IAASF,EAAKyG,MAAMrC,KAAK2F,SAASvB,IAAKtI,GACvE,MAAM,IAAIe,EAEZ,IAAMoL,EAAejI,KAAK8H,UAAUE,EAAYxD,OAC1C0D,EAAgBlI,KAAK8H,UAAUE,EAAYxD,MAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK0H,OAAS1H,KAAKyF,QAC1F0C,EAAqBvM,EAAK0G,SAAS0F,EAAY5D,IAAK/H,GACpD4F,EAAYrG,EAAK0G,SAAS6F,EAAoBD,EAAc9D,KAC5DlC,EAActG,EAAKiD,IAAIjD,EAAK0G,SAAS2F,EAAa7D,IAAK9H,GAAQ6L,GAC/DC,EAAe,IAAI9D,GACvB0D,EAAYxD,MAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK0H,OAAS1H,KAAKyF,OAC3D7J,EAAKkD,OAAOmD,EAAWC,IAEzB,GAAItG,EAAKyG,MAAM+F,EAAahE,IAAKtI,GAC/B,MAAM,IAAI0B,EAEZ,MAAO,CAAC4K,EAAc,IAAI/B,EAAK4B,EAAapJ,IAAImJ,GAAcE,EAAc3F,SAAS6F,MACtF9H,EAEM+H,eAAA,SAAeD,GAEpB,GADUpI,KAAKyH,cAAcW,EAAa5D,QAA1CzG,MAEEnC,EAAKyG,MAAMrC,KAAK0F,SAAStB,IAAKtI,IAC9BF,EAAKyG,MAAMrC,KAAK2F,SAASvB,IAAKtI,IAC9BF,EAAKkC,mBAAmBsK,EAAahE,IAAKpE,KAAK8H,UAAUM,EAAa5D,OAAOJ,KAE7E,MAAM,IAAIvH,EAGZ,IAAMqL,EAAgBlI,KAAK8H,UAAUM,EAAa5D,OAC5CyD,EAAejI,KAAK8H,UAAUM,EAAa5D,MAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK0H,OAAS1H,KAAKyF,QAC1FxD,EAAYrG,EAAK0G,SAAS1G,EAAK0G,SAAS2F,EAAa7D,IAAKgE,EAAahE,KAAM9H,GAC7E4F,EAActG,EAAK0G,SAAS1G,EAAK2G,SAAS2F,EAAc9D,IAAKgE,EAAahE,KAAM/H,GAChF2L,EAAc,IAAI1D,GACtB8D,EAAa5D,MAAMjE,OAAOP,KAAKyF,QAAUzF,KAAK0H,OAAS1H,KAAKyF,OAC5D7J,EAAKiD,IAAIjD,EAAKkD,OAAOmD,EAAWC,GAAcnG,IAEhD,MAAO,CAACiM,EAAa,IAAI3B,EAAK4B,EAAapJ,IAAImJ,GAAcE,EAAc3F,SAAS6F,MACrF9H,EAEMgI,mBAAA,SACLC,EACAjC,EACAC,GAEUgC,EAAY/D,MAAMjE,OAAOP,KAAKyG,iBAAxC1I,MACA,IAKIyK,EALEhC,EAAeF,EAAa9B,MAAM/D,YAAY8F,EAAa/B,OAC7D,CAAC8B,EAAcC,GACf,CAACA,EAAcD,GAInB,GAHUE,EAAa,GAAGhC,MAAMjE,OAAOP,KAAKyF,SAAWe,EAAa,GAAGhC,MAAMjE,OAAOP,KAAK0H,SAAzF3J,MAGInC,EAAKyG,MAAMkG,EAAYnE,IAAKtI,GAC9B0M,EAAY5M,EAAK2G,SAAS/D,GAAK5C,EAAK0G,SAASkE,EAAa,GAAGpC,IAAKoC,EAAa,GAAGpC,MAAOzI,OACpF,CACL,IAAM8M,EAAU7M,EAAKkD,OAAOlD,EAAK0G,SAASkE,EAAa,GAAGpC,IAAKmE,EAAYnE,KAAMpE,KAAK0F,SAAStB,KACzFsE,EAAU9M,EAAKkD,OAAOlD,EAAK0G,SAASkE,EAAa,GAAGpC,IAAKmE,EAAYnE,KAAMpE,KAAK2F,SAASvB,KAC/FoE,EAAY5M,EAAKoC,gBAAgByK,EAASC,GAAWD,EAAUC,EAEjE,IAAK9M,EAAKgD,YAAY4J,EAAW1M,GAC/B,MAAM,IAAI0B,EAEZ,OAAO,IAAI8G,GAAYtE,KAAKyG,eAAgB+B,IAC7ClI,EAEMqI,kBAAA,SACLnE,EACA+D,EACAC,EACAI,EACAC,GAOA,IAAIC,EACJ,YATAF,IAAAA,GAAiB,GAGP5I,KAAKyH,cAAcjD,IAA7BzG,MACUwK,EAAY/D,MAAMjE,OAAOP,KAAKyG,iBAAxC1I,MACUyK,EAAUhE,MAAMjE,OAAOP,KAAKyG,iBAAtC1I,MACUnC,EAAKoC,gBAAgBwK,EAAUpE,IAAKmE,EAAYnE,MAA1DrG,MAGK6K,EAEE,CACOC,GAAZ9K,MACA,IAAMgL,EAAc1K,EAAewK,GACnC,GAAKjN,EAAKyG,MAAM0G,EAAajN,GAY3BgN,EAAsBP,MAZY,CAClC,IAAMS,EAAQxK,GAAK5C,EAAK0G,SAAStC,KAAK0F,SAAStB,IAAKpE,KAAK2F,SAASvB,MAC5D6E,EAAYzK,GAAKuK,GACvB,GAAInN,EAAKgD,YAAYoK,EAAOC,GAAY,CACtC,IAAMhH,EAAYrG,EAAK0G,SAASiG,EAAYnE,IAAKxI,EAAK2G,SAASyG,EAAOC,IAChE/G,EAActG,EAAKiD,IAAIjD,EAAK0G,SAAS0G,EAAO9M,GAAO+M,GACnDC,EAAetN,EAAKkD,OAAOmD,EAAWC,GAC5C4G,EAAsBP,EAAY1J,IAAI,IAAIyF,GAAYtE,KAAKyG,eAAgByC,SAE3EJ,EAAsBP,QAb1BO,EAAsBP,EAoBxB,OAAO,IAAIjE,GACTE,EACA5I,EAAKkD,OAAOlD,EAAK0G,SAASkG,EAAUpE,IAAKpE,KAAK8H,UAAUtD,GAAOJ,KAAM0E,EAAoB1E,OAE5FX,EAAA4C,IAAA3C,kBAAAC,IAxJD,WACE,OAAO,IAAIc,GAAMzE,KAAKyF,OAAQzF,KAAK0H,OAAQ1H,KAAKwG,aAAa,GAAGpC,IAAKpE,KAAKwG,aAAa,GAAGpC,QAG5FV,kBAAAC,IAGA,WACE,OAAO,IAAIc,GAAMzE,KAAK0H,OAAQ1H,KAAKyF,OAAQzF,KAAKwG,aAAa,GAAGpC,IAAKpE,KAAKwG,aAAa,GAAGpC,QAC3FV,cAAAC,IAcD,WACE,OAAO3D,KAAKyF,OAAOpK,WACpBqI,aAAAC,IAED,WACE,OAAO3D,KAAKwG,aAAa,GAAGhC,SAC7Bd,aAAAC,IAED,WACE,OAAO3D,KAAKwG,aAAa,GAAGhC,SAC7Bd,eAAAC,IAED,WACE,OAAO3D,KAAKwG,aAAa,MAC1B9C,eAAAC,IAED,WACE,OAAO3D,KAAKwG,aAAa,UC9GhB2C,cAsCV,OAAA1F,GA/BD,SAAmB0B,EAAeiE,EAAiBC,GACvClE,EAAM9F,OAAS,GAAzBtB,MAEEoH,EAAMmE,OAAM,SAAA/D,GAAI,OAAIA,EAAKlK,UAAY8J,EAAM,GAAG9J,YADhD0C,MAKGqL,aAAiBhJ,IAAS+E,EAAM,GAAGsC,cAAc2B,IAC/CA,IAAUjJ,IAASgF,EAAM,GAAGsC,cAAc3G,GAAKqE,EAAM,GAAG9J,WAF7D0C,WAMoB,IAAXsL,GACJA,aAAkBjJ,IAAS+E,EAAMA,EAAM9F,OAAS,GAAGoI,cAAc4B,IACjEA,IAAWlJ,IAASgF,EAAMA,EAAM9F,OAAS,GAAGoI,cAAc3G,GAAKqE,EAAM,GAAG9J,WAH7E0C,MAQA,IADA,IACuCgH,EADjCS,EAAgB,CAAC4D,aAAiBhJ,GAAQgJ,EAAQtI,GAAKqE,EAAM,GAAG9J,UACtE4J,EAAAC,EAAwBC,EAAMC,aAASL,EAAAE,KAAAI,MAAE,CAAA,IAAAC,EAAAP,EAAAnH,MAA1B2H,EAAID,KACXiE,EAAe/D,EADVF,MAEDiE,EAAahJ,OAAOgF,EAAKE,SAAW8D,EAAahJ,OAAOgF,EAAKmC,SAAvE3J,MACA,IAAMsL,EAASE,EAAahJ,OAAOgF,EAAKE,QAAUF,EAAKmC,OAASnC,EAAKE,OACrED,EAAKlG,KAAK+J,GAGZrJ,KAAKmF,MAAQA,EACbnF,KAAKwF,KAAOA,EACZxF,KAAKwJ,SAAW/E,GAAMI,UAAU7E,MAChCA,KAAKoJ,MAAQA,EACbpJ,KAAKqJ,OAASA,MAAAA,EAAAA,EAAU7D,EAAKA,EAAKnG,OAAS,OAC5CqE,cAAAC,IAED,WACE,OAAO3D,KAAKmF,MAAM,GAAG9J,eC9CnBoO,GAAe,IAAIzH,GAAS5F,GAErBsN,YAAQ5F,GAAA,SAAA4F,IAAA,OAAA5F,EAAA6F,WAAAC,iBAAAvM,EAAAqM,EAAA5F,GAAA,IAAAxD,EAAAoJ,EAAAtM,UAOlB,OAPkBkD,EACZmC,cAAA,SAAcC,EAA+BC,EAAiBC,GACnE,gBADmBF,IAAAA,EAA4B,GACxC1C,KAAKsC,SAASmH,IAAchH,cAAcC,EAAmBC,EAAQC,IAC7EtC,EAEMgD,QAAA,SAAQD,EAA2BV,EAAiBC,GACzD,gBADaS,IAAAA,EAAwB,GAC9BrD,KAAKsC,SAASmH,IAAcnG,QAAQD,EAAeV,EAAQC,IACnE8G,GAP0B1H,aC8Bb6H,GAAsBC,EAAgBC,GAIpD,OAFUpJ,GAAemJ,EAAE9B,YAAYjE,SAAUgG,EAAE/B,YAAYjE,WAA/DhG,MACU4C,GAAemJ,EAAE1B,aAAarE,SAAUgG,EAAE3B,aAAarE,WAAjEhG,MACI+L,EAAE1B,aAAa5F,QAAQuH,EAAE3B,cACvB0B,EAAE9B,YAAYxF,QAAQuH,EAAE/B,aACnB,EAGL8B,EAAE9B,YAAYjJ,SAASgL,EAAE/B,cACnB,EAED,EAIL8B,EAAE1B,aAAarJ,SAASgL,EAAE3B,cACrB,GAEC,WAME4B,GAAgBF,EAAUC,GACxC,IAAME,EAASJ,GAAsBC,EAAGC,GACxC,OAAe,IAAXE,EACKA,EAILH,EAAEI,YAAYnL,SAASgL,EAAEG,cACnB,EACCJ,EAAEI,YAAYtL,YAAYmL,EAAEG,aAC9B,EAIFJ,EAAEhF,MAAMU,KAAKnG,OAAS0K,EAAEjF,MAAMU,KAAKnG,OAe5C,SAAS8K,GAAcjE,EAAgC7K,GACrD,OAAI6K,aAA0B5B,GAAoB4B,EAC9CA,EAAenC,WAAa5D,GAAc,IAAImE,GAAYxD,GAAKzF,GAAU6K,EAAe9B,UAC5FrG,MAGF,SAASqM,GAAgBrG,EAAoB1I,GAC3C,OAAI0I,aAAoB3D,GAAc2D,EAClCA,IAAa5D,GAAcW,GAAKzF,QACpC0C,MAOF,IAAasM,cAgDX,SAAAA,EAAmBvF,EAAcd,EAAwBsG,GACvD,IAtIsElC,EAClEmC,EAEAC,EAmIEC,EAAyB,IAAIC,MAAM5F,EAAMU,KAAKnG,QAC9CsL,EAAoB,IAAID,MAAM5F,EAAMK,MAAM9F,QAChD,GAAIiL,IAAc1P,kBAAUgQ,YAAa,CAC7BjK,GAAeqD,EAAOD,SAAUe,EAAMsE,QAAhDrL,MACA0M,EAAQ,GAAKN,GAAcnG,EAAQc,EAAMzJ,SACzC,IAAK,IAAIwP,EAAI,EAAGA,EAAI/F,EAAMU,KAAKnG,OAAS,EAAGwL,IAAK,CAC9C,IACAC,EADahG,EAAMK,MAAM0F,GACa9C,gBAAgB0C,EAAQI,IAAzCE,EAAQD,KAC7BL,EAAQI,EAAI,GADOC,KAEnBH,EAAUE,GAAKE,OAEZ,CACKpK,GAAeqD,EAAOD,SAAUe,EAAMuE,SAAhDtL,MACA0M,EAAQA,EAAQpL,OAAS,GAAK8K,GAAcnG,EAAQc,EAAMzJ,SAC1D,IAAK,IAAIwP,EAAI/F,EAAMU,KAAKnG,OAAS,EAAGwL,EAAI,EAAGA,IAAK,CAC9C,IACAG,EADalG,EAAMK,MAAM0F,EAAI,GACQxC,eAAeoC,EAAQI,IAAxCE,EAAQC,KAC5BP,EAAQI,EAAI,GADMG,KAElBL,EAAUE,EAAI,GAAKE,GAIvB/K,KAAK8E,MAAQA,EACb9E,KAAKsK,UAAYA,EACjBtK,KAAKgI,YACHsC,IAAc1P,kBAAUgQ,YACpB5G,EACAc,EAAMsE,QAAUjJ,GAChB0D,GAAeM,MAAMsG,EAAQ,GAAGrG,KAChCqG,EAAQ,GACdzK,KAAKoI,aACHkC,IAAc1P,kBAAUqQ,aACpBjH,EACAc,EAAMuE,SAAWlJ,GACjB0D,GAAeM,MAAMsG,EAAQA,EAAQpL,OAAS,GAAG+E,KACjDqG,EAAQA,EAAQpL,OAAS,GAC/BW,KAAKkL,eAAiB,IAAIzG,GACxBzE,KAAKgI,YAAYjE,SACjB/D,KAAKoI,aAAarE,SAClB/D,KAAKgI,YAAY5D,IACjBpE,KAAKoI,aAAahE,KAEpBpE,KAAKmL,aAAe1G,GAAMI,UAAU,IAAIsE,GAAMwB,EAAW7F,EAAMsE,QAC/DpJ,KAAKkK,aAjLiE9B,EAiLEpI,KAAKoI,aA9KzEoC,GAFAD,EAgLkCzF,EAAM0E,SAhLlBpF,IAAI9B,SAgLwBtC,KAAKgI,YAhLR5D,MAEzB7B,SAAS6F,EAAahE,KAAKtF,OAAOyL,GACvD,IAAIb,GAAQc,EAASvI,UAAWuI,EAAStI,cA+GhDmI,EAKce,QAAP,SAAetG,EAAcuG,GAClC,OAAO,IAAIhB,EAAMvF,EAAOuG,EAAUzQ,kBAAUgQ,cAG9CP,EAKciB,SAAP,SAAgBxG,EAAcyG,GACnC,OAAO,IAAIlB,EAAMvF,EAAOyG,EAAW3Q,kBAAUqQ,eAkD/C,IAAA3K,EAAA+J,EAAAjN,UAmNC,OAnNDkD,EAIOkL,iBAAA,SAAiBC,GAEtB,GADWA,EAAkB1M,SAASjD,IAAtCiC,MACIiC,KAAKsK,YAAc1P,kBAAUqQ,aAC/B,OAAOjL,KAAKoI,aAEZ,IAAMsD,EAA4B,IAAI1J,GAASjG,GAC5C8C,IAAI4M,GACJtJ,SACAG,SAAStC,KAAKoI,aAAahE,KAAKlB,SACnC,OAAOlD,KAAKoI,wBAAwB9D,GAChC,IAAIA,GAAYtE,KAAKoI,aAAa5D,MAAOkH,GACzC7H,GAAeM,MAAMuH,IAI7BpL,EAIOqL,gBAAA,SAAgBF,GAErB,GADWA,EAAkB1M,SAASjD,IAAtCiC,MACIiC,KAAKsK,YAAc1P,kBAAUgQ,YAC/B,OAAO5K,KAAKgI,YAEZ,IAAM4D,EAA2B,IAAI5J,GAASjG,GAAK8C,IAAI4M,GAAmBnJ,SAAStC,KAAKgI,YAAY5D,KAAKlB,SACzG,OAAOlD,KAAKgI,uBAAuB1D,GAC/B,IAAIA,GAAYtE,KAAKgI,YAAYxD,MAAOoH,GACxC/H,GAAeM,MAAMyH,IAI7BvB,EAccwB,iBAAP,SACL1G,EACA2G,EACAC,EAAqBC,EAGrBC,EACAC,EACAC,oBAJuD,GAAEH,EAAAI,EAAAC,EAAvDC,cAAAA,WAAaF,EAAG,EAACA,EAAAG,EAAAF,EAAEG,QAAAA,WAAOD,EAAG,EAACA,WAEhCN,IAAAA,EAAuB,aACvBC,IAAAA,EAAmCJ,YACnCK,IAAAA,EAAsB,IAEZhH,EAAM9F,OAAS,GAAzBtB,MACUyO,EAAU,GAApBzO,MACUmO,IAAqBJ,GAAoBG,EAAa5M,OAAS,GAAzEtB,MACA,IAAM1C,EACJyQ,aAA4BxH,GACxBwH,EAAiBtH,MAAMnJ,QACvB0Q,aAAuB3L,GACvB2L,EAAY1Q,aACZ6L,OACgBA,IAAZ7L,GAAV0C,MAIA,IAFA,IAAMsN,EAAWlB,GAAc2B,EAAkBzQ,GAC3CoR,EAAWrC,GAAgB2B,EAAa1Q,GACrCwP,EAAI,EAAGA,EAAI1F,EAAM9F,OAAQwL,IAAK,CACrC,IAAMtF,EAAOJ,EAAM0F,GAEnB,IAAKtF,EAAKE,OAAOlF,OAAO8K,EAAS7G,QAAWe,EAAKmC,OAAOnH,OAAO8K,EAAS7G,UACpEe,EAAKG,SAASlD,QAAQ1G,KAASyJ,EAAKI,SAASnD,QAAQ1G,GAAzD,CAEA,IAAIyP,SACJ,IACIA,EAAahG,EAAKwC,gBAAgBsD,MACpC,MAAOjN,GAGP,GAAIA,EAAMsO,+BACR,SAEF,MAAMtO,EAGR,GAAImN,EAAU/G,MAAMjE,OAAOkM,GACzBxN,GACEkN,EACA,IAAI9B,EACF,IAAIlB,MAAKwD,OAAKV,GAAc1G,IAAO2G,EAAiBnI,SAAUgI,GAC9DG,EACAtR,kBAAUgQ,aAEZ0B,EACAtC,SAEG,GAAIwC,EAAU,GAAKrH,EAAM9F,OAAS,EAAG,CAC1C,IAAMuN,EAAyBzH,EAAMS,MAAM,EAAGiF,GAAG8B,OAAOxH,EAAMS,MAAMiF,EAAI,EAAG1F,EAAM9F,SAGjFgL,EAAMwB,iBACJe,EACArB,EACAQ,EACA,CACEO,cAAAA,EACAE,QAASA,EAAU,MACpBG,OACGV,GAAc1G,IAClB2G,EACAC,KAKN,OAAOA,GAGT9B,EAecwC,kBAAP,SACL1H,EACA2H,EACAC,EAAiCC,EAGjCf,EACAgB,EACAd,oBAJuD,GAAEa,EAAAE,EAAAC,EAAvDb,cAAAA,WAAaY,EAAG,EAACA,EAAAE,EAAAD,EAAEX,QAAAA,WAAOY,EAAG,EAACA,WAEhCnB,IAAAA,EAAuB,aACvBgB,IAAAA,EAAoCF,YACpCZ,IAAAA,EAAsB,IAEZhH,EAAM9F,OAAS,GAAzBtB,MACUyO,EAAU,GAApBzO,MACUkP,IAAsBF,GAAqBd,EAAa5M,OAAS,GAA3EtB,MACA,IAAM1C,EACJ0R,aAA6BzI,GACzByI,EAAkBvI,MAAMnJ,QACxByR,aAAsB1M,GACtB0M,EAAWzR,aACX6L,OACgBA,IAAZ7L,GAAV0C,MAIA,IAFA,IAAMwN,EAAYpB,GAAc4C,EAAmB1R,GAC7CgS,EAAUjD,GAAgB0C,EAAYzR,GACnCwP,EAAI,EAAGA,EAAI1F,EAAM9F,OAAQwL,IAAK,CACrC,IAAMtF,EAAOJ,EAAM0F,GAEnB,IAAKtF,EAAKE,OAAOlF,OAAOgL,EAAU/G,QAAWe,EAAKmC,OAAOnH,OAAOgL,EAAU/G,UACtEe,EAAKG,SAASlD,QAAQ1G,KAASyJ,EAAKI,SAASnD,QAAQ1G,GAAzD,CAEA,IAAIuP,SACJ,IACIA,EAAY9F,EAAK8C,eAAekD,MAClC,MAAOnN,GAIP,GAAIA,EAAMkP,4BACR,SAEF,MAAMlP,EAGR,GAAIiN,EAAS7G,MAAMjE,OAAO8M,GACxBpO,GACEkN,EACA,IAAI9B,EACF,IAAIlB,IAAO5D,GAAIoH,OAAKV,GAAea,EAAYG,EAAkBlJ,UACjEkJ,EACArS,kBAAUqQ,cAEZqB,EACAtC,SAEG,GAAIwC,EAAU,GAAKrH,EAAM9F,OAAS,EAAG,CAC1C,IAAMuN,EAAyBzH,EAAMS,MAAM,EAAGiF,GAAG8B,OAAOxH,EAAMS,MAAMiF,EAAI,EAAG1F,EAAM9F,SAGjFgL,EAAMwC,kBACJD,EACAE,EACAzB,EACA,CACEiB,cAAAA,EACAE,QAASA,EAAU,IAEpBjH,GAAIoH,OAAKV,GACVgB,EACAd,KAKN,OAAOA,GACR9B,KC3WH,SAASkD,GAAMrH,GACb,WAAYA,EAAe9B,IAAI7F,SAAS,IAG1C,OAKsBiP,cAIpB,SAAAA,KAqEC,OApEDA,EAKcC,mBAAP,SAA0BC,EAAcC,GAC7C,IAAMC,EAAUF,EAAM1F,YAAYjE,WAAa5D,GACzC0N,EAAWH,EAAMtF,aAAarE,WAAa5D,GAErCyN,GAAWC,GAAvB9P,MACU4P,EAAQG,IAAM,GAAxB/P,MAEA,IAOIgQ,EACAC,EACApQ,EATEqQ,EAAahQ,EAAwB0P,EAAQO,WAC7C7C,EAAmBkC,GAAMG,EAAM/B,gBAAgBgC,EAAQQ,kBACvD5C,EAAoBgC,GAAMG,EAAMlC,iBAAiBmC,EAAQQ,kBACzD3I,EAAiBkI,EAAM5I,MAAMU,KAAK4I,KAAI,SAAA5J,GAAK,OAAIA,EAAMtG,WACrDmQ,QAAiBC,KAAKC,OAAM,IAAIC,MAAOC,UAAY,KAAQd,EAAQG,KAAKvP,SAAS,IACjFmQ,EAAmBC,QAAQhB,EAAQiB,eAKzC,OAAQlB,EAAMpD,WACZ,KAAK1P,kBAAUgQ,YACTgD,GACFG,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAACzC,EAAW/F,EAAMyI,EAAII,GAC7BzQ,EAAQyN,GACCwC,GACTE,EAAaW,EAAmB,qDAAuD,wBAEvFV,EAAO,CAAC3C,EAAUE,EAAW/F,EAAMyI,EAAII,GACvCzQ,EA3CO,QA6CPmQ,EAAaW,EACT,wDACA,2BAEJV,EAAO,CAAC3C,EAAUE,EAAW/F,EAAMyI,EAAII,GACvCzQ,EAlDO,OAoDT,MACF,KAAKhD,kBAAUqQ,aACFyD,GAAX3Q,MACI6P,GACFG,EAAa,wBAEbC,EAAO,CAACzC,EAAW/F,EAAMyI,EAAII,GAC7BzQ,EAAQyN,GACCwC,GACTE,EAAa,wBAEbC,EAAO,CAACzC,EAAWF,EAAU7F,EAAMyI,EAAII,GACvCzQ,EAhEO,QAkEPmQ,EAAa,2BAEbC,EAAO,CAACzC,EAAWF,EAAU7F,EAAMyI,EAAII,GACvCzQ,EArEO,OAyEb,MAAO,CACLmQ,WAAAA,EACAC,KAAAA,EACApQ,MAAAA,IAEH4P,2RCvHCqB,KAAoBC,OACrBnU,gBAAQO,SAAU,CACjB6T,6CAA8C,GAC/CD,IAMmBE,cAIpB,SAAAA,KAiDC,OA/CDA,EAQoBC,wBAClB5T,EACA6C,EACAgR,EACAnP,EACA9C,GAAa,uBAEPkS,GAaN,OAAO,IAAI/O,GAAM/E,EAAS6C,EAASiR,EAAgBpP,EAAQ9C,SAjBnDiK,IAARgI,IAAAA,EAAWE,qBAAmBC,aAAWhU,KAAS,IAAA2Q,EAKM,yBAAtDsD,EAAOT,cAAoBS,WAAAC,EAApBD,EAAuBjU,cAAQkU,SAA/BA,EAAkCrR,IAAqB,OAAAsR,QAAAC,QAAAzD,EAAAgB,EAC1D6B,GAAqBxT,GAAS6C,IAAQsR,QAAAC,QAChC,IAAIC,WAASxR,EAASyR,GAAOT,GAAUpP,WAAW8P,MAAK,SAAC9P,aAQ5D,OAPA+O,GAAoBxH,KACfwH,KAAoB/H,MACtBzL,GAAOgM,aAAAwI,EACHhB,cAAoBgB,SAApBA,EAAuBxU,KAAQwL,MACjC3I,GAAU4B,EAAQ+G,IAAAC,IAGhBhH,MACP8P,KAAA5C,UAET8C,GAAA,OAAAN,QAAAO,OAAAD,KAEDd,EAMoBgB,uBAClBtJ,EACAC,EACAuI,GAAQ,SAAAhI,IAARgI,IAAAA,EAAWE,qBAAmBC,aAAW3I,EAAOrL,WAEtCqL,EAAOrL,UAAYsL,EAAOtL,SAApC0C,MACA,IAAMG,EAAUmI,GAAKlI,WAAWuI,EAAQC,GAAO,OAAA6I,QAAAC,QACV,IAAIC,WAASxR,EAAS+R,EAAeC,IAAKhB,GAAUiB,eAAaP,eAAAvD,GAAA,IAA/F+D,EAAS/D,KAAEgE,EAAShE,KACrBiE,EAAW5J,EAAOjG,YAAYkG,GAAU,CAACyJ,EAAWC,GAAa,CAACA,EAAWD,GACnF,OAAO,IAAI/J,GAAK,IAAI/B,GAAYoC,EAAQ4J,EAAS,IAAK,IAAIhM,GAAYqC,EAAQ2J,EAAS,cACxFR,GAAA,OAAAN,QAAAO,OAAAD,KAAAd,0edZ6B,SAAC3T,GAC/B,OAAOI,EAAmBJ,IARL"}